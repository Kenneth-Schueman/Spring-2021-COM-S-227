package hw2;

/**
 * Model of a Monopoly-like game. Two players take turns rolling dice to move
 * around a board. The game ends when one of the players has at least
 * MONEY_TO_WIN money or one of the players goes bankrupt (has negative money).
 * 
 * @author kenschue
 */
public class CyGame {
	/**
	 * Do nothing square type.
	 */
	public static final int DO_NOTHING = 0;
	/**
	 * Pass go square type.
	 */
	public static final int PASS_GO = 1;
	/**
	 * Cyclone square type.
	 */
	public static final int CYCLONE = 2;
	/**
	 * Pay the other player square type.
	 */
	public static final int PAY_PLAYER = 3;
	/**
	 * Get an extra turn square type.
	 */
	public static final int EXTRA_TURN = 4;
	/**
	 * Jump forward square type.
	 */
	public static final int JUMP_FORWARD = 5;
	/**
	 * Stuck square type.
	 */
	public static final int STUCK = 6;
	/**
	 * Points awarded when landing on or passing over go.
	 */
	public static final int PASS_GO_PRIZE = 200;
	/**
	 * The amount payed to the other player per unit when landing on a
	 * PAY_PLAYER square.
	 */
	public static final int PAYMENT_PER_UNIT = 20;
	/**
	 * The amount of money required to win.
	 */
	public static final int MONEY_TO_WIN = 400;
	/**
	 * The cost of one unit.
	 */
	public static final int UNIT_COST = 50;
	
	/**
	 * Returns a one-line string representation of the current game state. The
	 * format is:
	 * <p>
	 * <tt>Player 1*: (0, 0, $0) Player 2: (0, 0, $0)</tt>
	 * <p>
	 * The asterisks next to the player's name indicates which players turn it
	 * is. The numbers (0, 0, $0) indicate which square the player is on, how
	 * many units the player has, and how much money the player has
	 * respectively.
	 * 
	 * @return one-line string representation of the game state
	 */
	
	//Instance Variables
	private int playerMoney1;
	private int playerMoney2;
	private int playerUnits1 = 1;
	private int playerUnits2 = 1;
	private int playerSquare1;
	private int playerSquare2;
	private boolean isPlayer1Turn = true;
	private boolean stuckStatus1 = false;
	private boolean stuckStatus2 = false;
	
	private int gameSquareAmount;
	
	
	public CyGame(int i, int j) {
		//Game setup
		gameSquareAmount = (i - 1);
		
		//Player setup
		playerMoney1 = j;
		playerMoney2 = j;
	}
	/**
	 * Sets the initial conditions based on user input 
	 */
	public int getPlayer1Money() {
		//Returns player 1's money
		return (playerMoney1);
	}
	/**
	 * Returns Player 1's money 
	 */
	public int getPlayer1Units() {
		// Returns player 1's units
		return (playerUnits1);
	}
	/**
	 * Returns Player 1's units
	 */
	public int getPlayer1Square() {
		//Returns player 1's square
		
		return (playerSquare1);
	}
	/**
	 * Returns Player 1's position
	 */
	public int getPlayer2Money() {
		//Returns player 2's money
		return (playerMoney2);
	}
	/**
	 * Returns Player 2's money 
	 */
	public int getPlayer2Units() {
		//Returns player 2's units
		return (playerUnits2);
	}
	/**
	 * Returns Player 2's units
	 */
	public int getPlayer2Square() {
		//Returns player 2's square
		return (playerSquare2);
	}
	/**
	 * Returns Player 1's position 
	 */
	public int getCurrentPlayer() {
		//player 1 = 0 / player 2 = 1
		if (isPlayer1Turn == true) 
		{
			if (stuckStatus1 == true)
			{	
				return 2;
			}
			return 1;
		}
		else
		{
			if (stuckStatus2 == true)
			{	
				return 1;
			}
			return 2;
		}
	}
	/**
	 * Returns current player 
	 */
	public int getSquareType(int i) {
		if (i == 0)
		{
			return (PASS_GO);
		}	
		/**
		 * If player's positions is equal to 0, adds PASS_GO_PRIZE and returns PASS_GO
		 */
		else if (i == gameSquareAmount)
		{
			return (CYCLONE);
		}
		/**
		 * If player's positions is equal to gameSquareAmount, sets player position to other players position, returns CYCLONE
		 */
		else if ((i % 5) == 0)
		{
			return (PAY_PLAYER);
		}
		/**
		 * If player's positions is equal to (i % 5) == 0, takes or adds PAYMENT_PER_UNIT, return PAY_PLAYER
		 */
		else if ((i % 7) == 0 || (i % 11 == 0))
		{
			return (EXTRA_TURN);
		}
		/**
		 * If player's positions is equal to (i % 7) or (i % 11) == 0, player revives extra turn, returns EXTRA_TURN
		 */
		else if ((i % 3) == 0)
		{
				return (STUCK);
		}
		/**
		 * If player's positions is equal to (i % 3) == 0, skips players turn, return STUCK
		 */
			
		else if ((i % 2) == 0)
		{
			return (JUMP_FORWARD);
		}
		/**
		 * If player's positions is equal to (i % 2) == 0, adds 4 square to position, return JUMP_FOWARD
		 */
		else
		{
			return (DO_NOTHING);
		}
		/**
		 * If none of the above, return DO_NOTHING
		 */
		}

	public void roll(int i) {
		if (isPlayer1Turn == true)
		{
			if (stuckStatus1 == true)
			{	
				endTurn();
			}
			else
			{
				if ((playerSquare1 + i) > (gameSquareAmount -1))
				{
					int t = playerSquare1 - gameSquareAmount;					
					playerSquare1 = 0;
					playerSquare1 += (t + i);
					playerMoney1 += PASS_GO_PRIZE;
				}
				
				playerSquare1 += i;
					
				if (playerSquare1 == 0)
				{
					playerMoney1 += PASS_GO_PRIZE;
					endTurn();
				}
					
				/**
				 * If player's positions is equal to 0, adds PASS_GO_PRIZE and returns PASS_GO
				 */
				else if (playerSquare1 == gameSquareAmount)
				{
					playerSquare1 = playerSquare2;
					endTurn();
				}
				/**
				 * If player's positions is equal to gameSquareAmount, sets player position to other players position, returns CYCLONE
				 */
				else if ((playerSquare1 % 5) == 0)
				{
					playerMoney2 += PAYMENT_PER_UNIT;
					playerMoney1 -= PAYMENT_PER_UNIT;
					endTurn();
					
				}
				/**
				 * If player's positions is equal to (i % 5) == 0, takes or adds PAYMENT_PER_UNIT, return PAY_PLAYER
				 */
				else if ((playerSquare1 % 7) == 0 || (playerSquare1 % 11 == 0))
				{
					endTurn();
				}
				/**
				 * If player's positions is equal to (i % 7) or (i % 11) == 0, player revives extra turn, returns EXTRA_TURN
				 */
				else if ((playerSquare1 % 3) == 0)
				{
					stuckStatus1 = true;
					endTurn();
				}
				/**
				 * If player's positions is equal to (i % 3) == 0, skips players turn, return STUCK
				 */
				
				else if ((playerSquare1 % 2) == 0)
				{
					playerSquare1 += 4;
					endTurn();
				}
				/**
				 * If player's positions is equal to (i % 2) == 0, adds 4 square to position, return JUMP_FOWARD
				 */
				else
				{
					endTurn();
				}
				/**
				 * If none of the above, return DO_NOTHING
				 */
			}
		}
		else
		{
			if (stuckStatus2 == true)
			{	
				endTurn();
			}
			else
			{
				
			if ((playerSquare2 + i) > (gameSquareAmount -1))
			{
				int t = playerSquare2 - gameSquareAmount;					
				playerSquare2 = 0;
				playerSquare2 += (t + i);
				playerMoney2 += PASS_GO_PRIZE;
			}
			
			playerSquare2 += i;
				
			if (playerSquare2 == 0)
			{
				playerMoney1 += PASS_GO_PRIZE;
				endTurn();
			}
				
			/**
			 * If player's positions is equal to 0, adds PASS_GO_PRIZE and returns PASS_GO
			 */
			else if (playerSquare2 == gameSquareAmount)
			{
				playerSquare2 = playerSquare1;
				endTurn();
			}
			/**
			 * If player's positions is equal to gameSquareAmount, sets player position to other players position, returns CYCLONE
			 */
			else if ((playerSquare2 % 5) == 0)
			{
				playerMoney1 += PAYMENT_PER_UNIT;
				playerMoney2 -= PAYMENT_PER_UNIT;
				endTurn();
				
			}
			/**
			 * If player's positions is equal to (i % 5) == 0, takes or adds PAYMENT_PER_UNIT, return PAY_PLAYER
			 */
			else if ((playerSquare2 % 7) == 0 || (playerSquare2 % 11 == 0))
			{
				endTurn();
			}
			/**
			 * If player's positions is equal to (i % 7) or (i % 11) == 0, player revives extra turn, returns EXTRA_TURN
			 */
			else if ((playerSquare2 % 3) == 0)
			{
				stuckStatus2 = true;
				endTurn();
			}
			/**
			 * If player's positions is equal to (i % 3) == 0, skips players turn, return STUCK
			 */
			
			else if ((playerSquare2 % 2) == 0)
			{
				playerSquare2 += 4;
				endTurn();
			}
			/**
			 * If player's positions is equal to (i % 2) == 0, adds 4 square to position, return JUMP_FOWARD
			 */
			else
			{
				endTurn();
			}
			/**
			 * If none of the above, return DO_NOTHING
			 */
			}
		}
	}

	public void endTurn() {
		if (isPlayer1Turn != true)
		{
			isPlayer1Turn = true;
		}
		else
		{
			isPlayer1Turn = false;
		}
	}

	public void buyUnit() {
		if (isPlayer1Turn != true)
		{
			++playerUnits2;
			playerMoney2 -= UNIT_COST;
		}
		else
		{
			++playerUnits1;
			playerMoney1 -= UNIT_COST;
		}
		
	}
	
	public void sellUnit() {
		if (isPlayer1Turn != true)
		{
			++playerUnits2;
			playerMoney2 += UNIT_COST;
		}
		else
		{
			++playerUnits1;
			playerMoney1 += UNIT_COST;
		}
		
	}

	public boolean isGameEnded() {
		if (playerMoney1 <= 0 || playerMoney2 <= 0)
		{
			return true;
		}
		
		if (playerMoney1 >= MONEY_TO_WIN || playerMoney2 >= MONEY_TO_WIN)
		{
			return true;
		}
		
		else
		{
		return false;
		}
	}

	public String toString() {
		String fmt = "Player 1%s: (%d, %d, $%d) Player 2%s: (%d, %d, $%d)";
		String player1Turn = "";
		String player2Turn = "";
		if (getCurrentPlayer() == 1) {
			player1Turn = "*";
		} else {
			player2Turn = "*";
		}
		return String.format(fmt,
				player1Turn, getPlayer1Square(), getPlayer1Units(), getPlayer1Money(),
				player2Turn, getPlayer2Square(), getPlayer2Units(), getPlayer2Money());
	}
}
